# app.py
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Tsushima Mini App API
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—à–∞ –Ω–∞ GitHub

import os
import shutil
import json
import time
import requests
import tempfile
import sqlite3
from fastapi import FastAPI, HTTPException, Depends, Header, Form, File, UploadFile, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from dotenv import load_dotenv
from typing import Optional, List, Dict, Any
from PIL import Image, ImageOps
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from security import validate_init_data, get_user_id_from_init_data
from db import init_db, get_user, upsert_user, create_build, get_build, get_user_builds, update_build_visibility, delete_build, update_build, get_all_users, get_mastery

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Tsushima Mini App API",
    description="API –¥–ª—è Telegram Mini App Tsushima.Ru",
    version="1.0.0"
)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_ORIGIN = os.getenv("ALLOWED_ORIGIN")
DB_PATH = os.getenv("DB_PATH", "/root/miniapp_api/app.db")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—Å–æ–æ–±—â–µ–Ω–∏–π
TROPHY_GROUP_CHAT_ID = os.getenv("TROPHY_GROUP_CHAT_ID", "-1002348168326")
TROPHY_GROUP_TOPIC_ID = os.getenv("TROPHY_GROUP_TOPIC_ID", "5675")
BOT_USERNAME = os.getenv("BOT_USERNAME", "swiezdo_testbot")

# –£–¥–∞–ª–µ–Ω—ã –∫–µ—à –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–æ—Ñ–µ–µ–≤

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
async def send_telegram_message(chat_id: str, text: str, reply_markup: dict = None, message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if message_thread_id:
        data["message_thread_id"] = message_thread_id
    
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()

async def send_telegram_photo(chat_id: str, photo_path: str, caption: str = "", reply_markup: dict = None, message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    
    with open(photo_path, 'rb') as photo_file:
        data = aiohttp.FormData()
        data.add_field('chat_id', chat_id)
        data.add_field('photo', photo_file, filename='photo.jpg')
        data.add_field('caption', caption)
        data.add_field('parse_mode', 'HTML')
        
        if message_thread_id:
            data.add_field('message_thread_id', message_thread_id)
        
        if reply_markup:
            data.add_field('reply_markup', json.dumps(reply_markup))
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                return await response.json()

async def send_telegram_media_group(chat_id: str, photo_paths: List[str], caption: str = "", message_thread_id: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
    """
    import aiohttp
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMediaGroup"
    
    media = []
    for i, photo_path in enumerate(photo_paths):
        media.append({
            "type": "photo",
            "media": f"attach://photo_{i}"
        })
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    photo_files = []
    try:
        for photo_path in photo_paths:
            photo_files.append(open(photo_path, 'rb'))
        
        data = aiohttp.FormData()
        data.add_field('chat_id', chat_id)
        data.add_field('media', json.dumps(media))
        data.add_field('parse_mode', 'HTML')
        
        if message_thread_id:
            data.add_field('message_thread_id', message_thread_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ FormData
        for i, photo_file in enumerate(photo_files):
            data.add_field(f'photo_{i}', photo_file, filename=f'photo_{i}.jpg')
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                result = await response.json()
                return result
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for photo_file in photo_files:
            photo_file.close()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ALLOWED_ORIGIN:
    raise ValueError("ALLOWED_ORIGIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://swiezdo.github.io", "http://localhost:8000", "http://127.0.0.1:8000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db(DB_PATH)

# –£–¥–∞–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–æ—Ñ–µ–µ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
@app.options("/{path:path}")
async def options_handler(path: str, request: Request):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS.
    """
    print(f"üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—É—Ç–∏: /{path}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": request.headers.get("origin", "*"),
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true",
        }
    )


def get_current_user(x_telegram_init_data: Optional[str] = Header(None)) -> int:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData.
    
    Args:
        x_telegram_init_data: –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data
    
    Returns:
        user_id (int) –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    if not x_telegram_init_data:
        raise HTTPException(
            status_code=401,
            detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data"
        )
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
    init_data = validate_init_data(x_telegram_init_data, BOT_TOKEN)
    if not init_data:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    user_id = get_user_id_from_init_data(init_data)
    if not user_id:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
    
    return user_id


def validate_psn_format(psn: str) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç PSN –Ω–∏–∫–Ω–µ–π–º–∞.
    
    Args:
        psn: PSN –Ω–∏–∫–Ω–µ–π–º
    
    Returns:
        True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    if not psn:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é: 3-16 —Å–∏–º–≤–æ–ª–æ–≤, A-Z, a-z, 0-9, -, _
    pattern = r'^[A-Za-z0-9_-]{3,16}$'
    return bool(re.match(pattern, psn))


@app.get("/health")
async def health_check():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API.
    """
    return {"status": "ok", "message": "Tsushima Mini App API —Ä–∞–±–æ—Ç–∞–µ—Ç"}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–æ—Ñ–µ–µ–≤ —É–¥–∞–ª–µ–Ω—ã





@app.options("/api/profile.get")
async def options_profile_get():
    """
    OPTIONS —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    print(f"üîç OPTIONS /api/profile.get - ALLOWED_ORIGIN: {ALLOWED_ORIGIN}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true",
        }
    )


@app.options("/api/profile.save")
async def options_profile_save():
    """
    OPTIONS —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    print(f"üîç OPTIONS /api/profile.save - ALLOWED_ORIGIN: {ALLOWED_ORIGIN}")
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": ALLOWED_ORIGIN,
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true",
        }
    )


@app.get("/api/profile.get")
async def get_profile(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency)
    
    Returns:
        JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ 404 –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    profile = get_user(DB_PATH, user_id)
    
    if not profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response_data = {
        "user_id": user_id,  # –ù—É–∂–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
        "real_name": profile.get("real_name", ""),
        "psn_id": profile.get("psn_id", ""),
        "platforms": profile.get("platforms", []),
        "modes": profile.get("modes", []),
        "goals": profile.get("goals", []),
        "difficulties": profile.get("difficulties", []),
        "avatar_url": profile.get("avatar_url")
    }
    
    return response_data


@app.post("/api/profile.save")
async def save_profile(
    user_id: int = Depends(get_current_user),
    real_name: str = Form(...),
    psn_id: str = Form(...),
    platforms: List[str] = Form(default=[]),
    modes: List[str] = Form(default=[]),
    goals: List[str] = Form(default=[]),
    difficulties: List[str] = Form(default=[])
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency)
        real_name: –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        psn_id: PSN –Ω–∏–∫–Ω–µ–π–º
        platforms: –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        modes: –°–ø–∏—Å–æ–∫ —Ä–µ–∂–∏–º–æ–≤
        goals: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        difficulties: –°–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
    
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not real_name or not real_name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª–µ 'real_name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        )

    if not validate_psn_format(psn_id):
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PSN –Ω–∏–∫–Ω–µ–π–º–∞ (3-16 —Å–∏–º–≤–æ–ª–æ–≤: A-Z, a-z, 0-9, -, _)"
        )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    profile_data = {
        "real_name": real_name.strip(),
        "psn_id": psn_id.strip(),
        "platforms": platforms,
        "modes": modes,
        "goals": goals,
        "difficulties": difficulties
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    success = upsert_user(DB_PATH, user_id, profile_data)

    if not success:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        )

    return {"status": "ok", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"}


@app.get("/api/users.list")
async def get_users_list(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id, psn_id, avatar_url –∏ max_mastery_levels)
    """
    users = get_all_users(DB_PATH)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    try:
        config = load_mastery_config()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        max_levels_map = {}
        for category in config.get('categories', []):
            category_key = category.get('key')
            max_levels = category.get('maxLevels', 0)
            if category_key:
                max_levels_map[category_key] = max_levels
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users:
            max_mastery_levels = []
            mastery = user.get('mastery', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ: solo, hellmode, raid, speedrun
            categories_order = ['solo', 'hellmode', 'raid', 'speedrun']
            for category_key in categories_order:
                if category_key in max_levels_map:
                    max_level = max_levels_map[category_key]
                    current_level = mastery.get(category_key, 0)
                    if current_level >= max_level and max_level > 0:
                        max_mastery_levels.append(category_key)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ mastery –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ max_mastery_levels)
            user.pop('mastery', None)
            user['max_mastery_levels'] = max_mastery_levels
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            user.pop('mastery', None)
            user['max_mastery_levels'] = []
    
    return {"users": users}


@app.get("/api/users.getProfile")
async def get_user_profile(
    target_user_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
        user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ 404 –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    profile = get_user(DB_PATH, target_user_id)
    
    if not profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    response_data = {
        "user_id": profile.get("user_id"),
        "real_name": profile.get("real_name", ""),
        "psn_id": profile.get("psn_id", ""),
        "platforms": profile.get("platforms", []),
        "modes": profile.get("modes", []),
        "goals": profile.get("goals", []),
        "difficulties": profile.get("difficulties", []),
        "avatar_url": profile.get("avatar_url")
    }
    
    return response_data


@app.get("/api/stats")
async def get_stats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).
    """
    from db import get_user_count
    
    user_count = get_user_count(DB_PATH)
    
    return {
        "total_users": user_count,
        "api_version": "1.0.0"
    }


# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ê–í–ê–¢–ê–†–û–ö ==========

@app.post("/api/users/avatars/{target_user_id}/upload")
async def upload_avatar(
    target_user_id: int,
    avatar: UploadFile = File(...),
    user_id: int = Depends(get_current_user)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–≤–∞—Ç–∞—Ä–∫–∞
        avatar: –ó–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    
    Returns:
        JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if target_user_id != user_id:
        raise HTTPException(
            status_code=403,
            detail="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not avatar.content_type or not avatar.content_type.startswith('image/'):
        raise HTTPException(
            status_code=400,
            detail="–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = os.path.join(os.path.dirname(DB_PATH), 'users', str(user_id))
        os.makedirs(user_dir, exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
        avatar_path = os.path.join(user_dir, 'avatar.jpg')
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pillow
        image = Image.open(avatar.file)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        image = ImageOps.exif_transpose(image)
        
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        width, height = image.size
        min_dimension = min(width, height)
        left = (width - min_dimension) // 2
        top = (height - min_dimension) // 2
        right = left + min_dimension
        bottom = top + min_dimension
        image = image.crop((left, top, right, bottom))
        
        # –†–µ—Å–∞–π–∑ –¥–æ 300x300
        image = image.resize((300, 300), Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', image.size, (255, 255, 255))
            if image.mode == 'P':
                image = image.convert('RGBA')
            background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
            image = background
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
        image.save(avatar_path, 'JPEG', quality=85, optimize=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º avatar_url –≤ –ë–î
        avatar_url = f"/users/{user_id}/avatar.jpg"
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET avatar_url = ? WHERE user_id = ?
        ''', (avatar_url, user_id))
        conn.commit()
        conn.close()
        
        return {
            "status": "ok",
            "message": "–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
            "avatar_url": avatar_url
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {str(e)}"
        )


@app.get("/users/{user_id}/avatar.jpg")
async def get_avatar(user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ 404 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    avatar_path = os.path.join(os.path.dirname(DB_PATH), 'users', str(user_id), 'avatar.jpg')
    
    if not os.path.exists(avatar_path):
        raise HTTPException(
            status_code=404,
            detail="–ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return FileResponse(avatar_path, media_type='image/jpeg')


# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ë–ò–õ–î–û–í ==========

@app.post("/api/builds.create")
async def create_build_endpoint(
    user_id: int = Depends(get_current_user),
    name: str = Form(...),
    class_name: str = Form(...),
    tags: str = Form(...),  # JSON —Å—Ç—Ä–æ–∫–∞
    description: str = Form(""),
    photo_1: UploadFile = File(...),
    photo_2: UploadFile = File(...)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏–ª–¥ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è psn_id
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    author = user_profile.get('psn_id', '')
    if not author:
        raise HTTPException(
            status_code=400,
            detail="PSN ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if not name or not name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
    if not class_name or not class_name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ö–ª–∞—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å JSON —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    try:
        import json
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        if tags.startswith('[') and tags.endswith(']'):
            tags_list = json.loads(tags)
        else:
            # –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            tags_list = [t.strip() for t in tags.split(',') if t.strip()]
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        try:
            tags_list = [t.strip() for t in tags.split(',') if t.strip()] if tags else []
        except:
            tags_list = []
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–ª–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è build_id
    build_data = {
        'user_id': user_id,
        'author': author,
        'name': name.strip(),
        'class': class_name.strip(),
        'tags': tags_list,
        'description': description.strip(),
        'photo_1': '',  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ
        'photo_2': '',  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ
        'is_public': 0
    }
    
    build_id = create_build(DB_PATH, build_data)
    if not build_id:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–¥–∞"
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∏–ª–¥–∞
    builds_dir = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id))
    os.makedirs(builds_dir, exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_1_path = os.path.join(builds_dir, 'photo_1.jpg')
        image1 = Image.open(photo_1.file)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        image1 = ImageOps.exif_transpose(image1)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (PNG —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º)
        if image1.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', image1.size, (255, 255, 255))
            if image1.mode == 'P':
                image1 = image1.convert('RGBA')
            background.paste(image1, mask=image1.split()[-1] if image1.mode == 'RGBA' else None)
            image1 = background
        image1.save(photo_1_path, 'JPEG', quality=85, optimize=True)
        photo_1.file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_2_path = os.path.join(builds_dir, 'photo_2.jpg')
        image2 = Image.open(photo_2.file)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        image2 = ImageOps.exif_transpose(image2)
        if image2.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', image2.size, (255, 255, 255))
            if image2.mode == 'P':
                image2 = image2.convert('RGBA')
            background.paste(image2, mask=image2.split()[-1] if image2.mode == 'RGBA' else None)
            image2 = background
        image2.save(photo_2_path, 'JPEG', quality=85, optimize=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –ë–î
        photo_1_url = f"/builds/{build_id}/photo_1.jpg"
        photo_2_url = f"/builds/{build_id}/photo_2.jpg"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–¥ —Å –ø—É—Ç—è–º–∏
        import sqlite3
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE builds SET photo_1 = ?, photo_2 = ? WHERE build_id = ?
        ''', (photo_1_url, photo_2_url, build_id))
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        # –£–¥–∞–ª—è–µ–º –±–∏–ª–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        delete_build(DB_PATH, build_id, user_id)
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
        if os.path.exists(builds_dir):
            shutil.rmtree(builds_dir)
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        )
    
    return {
        "status": "ok",
        "message": "–ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        "build_id": build_id
    }


@app.get("/api/builds.getMy")
async def get_my_builds(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±–∏–ª–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    builds = get_user_builds(DB_PATH, user_id)
    return {
        "status": "ok",
        "builds": builds
    }


@app.get("/api/builds.getPublic")
async def get_public_builds_endpoint():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã.
    """
    from db import get_public_builds as db_get_public_builds
    builds = db_get_public_builds(DB_PATH)
    return {
        "status": "ok",
        "builds": builds
    }

@app.get("/api/builds.search")
async def search_builds_endpoint(query: str, limit: int = 10):
    """
    –ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, —Ç–µ–≥–∞–º, –∫–ª–∞—Å—Å—É, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ ID.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç –∏–ª–∏ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤
    """
    from db import search_builds as db_search_builds
    
    builds = db_search_builds(DB_PATH, query, limit)
    return {
        "status": "ok",
        "builds": builds
    }


@app.get("/api/builds.get/{build_id}")
async def get_build_by_id_endpoint(build_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–¥ –ø–æ ID"""
    build = get_build(DB_PATH, build_id)
    
    if not build:
        raise HTTPException(status_code=404, detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å
    if not build.get('is_public'):
        return JSONResponse(
            status_code=403,
            content={"error": "–ë–∏–ª–¥ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", "is_private": True}
        )
    
    return JSONResponse(content={"build": build})


@app.get("/api/builds.getUserBuilds")
async def get_user_builds_endpoint(
    target_user_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        target_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –±–∏–ª–¥—ã –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
        user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ dependency, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    
    Returns:
        JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∏–ª–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from db import get_user_builds as db_get_user_builds
    all_builds = db_get_user_builds(DB_PATH, target_user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –±–∏–ª–¥—ã
    public_builds = [build for build in all_builds if build.get('is_public') == 1]
    
    return {
        "status": "ok",
        "builds": public_builds
    }


@app.post("/api/builds.togglePublish")
async def toggle_build_publish(
    user_id: int = Depends(get_current_user),
    build_id: int = Form(...),
    is_public: int = Form(...)
):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å –±–∏–ª–¥–∞.
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è is_public
    if is_public not in (0, 1):
        raise HTTPException(
            status_code=400,
            detail="is_public –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1"
        )
    
    success = update_build_visibility(DB_PATH, build_id, user_id, is_public)
    
    if not success:
        raise HTTPException(
            status_code=404,
            detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
        )
    
    return {
        "status": "ok",
        "message": "–í–∏–¥–∏–º–æ—Å—Ç—å –±–∏–ª–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    }


@app.delete("/api/builds.delete")
async def delete_build_endpoint(
    build_id: int,
    user_id: int = Depends(get_current_user)
):
    """
    –£–¥–∞–ª—è–µ—Ç –±–∏–ª–¥ –∏ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    """
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    success = delete_build(DB_PATH, build_id, user_id)
    
    if not success:
        raise HTTPException(
            status_code=404,
            detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    builds_dir = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id))
    if os.path.exists(builds_dir):
        try:
            shutil.rmtree(builds_dir)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –±–∏–ª–¥–∞: {e}")
    
    return {
        "status": "ok",
        "message": "–ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    }


@app.post("/api/builds.update")
async def update_build_endpoint(
    user_id: int = Depends(get_current_user),
    build_id: int = Form(...),
    name: str = Form(...),
    class_name: str = Form(...),
    tags: str = Form(...),  # JSON —Å—Ç—Ä–æ–∫–∞
    description: str = Form(""),
    photo_1: Optional[UploadFile] = File(None),
    photo_2: Optional[UploadFile] = File(None)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∏–ª–¥.
    """
    print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–ª–¥–∞ {build_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: name={name[:20]}..., class={class_name}, photo_1={photo_1 is not None}, photo_2={photo_2 is not None}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–ª–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    build = get_build(DB_PATH, build_id)
    if not build:
        raise HTTPException(
            status_code=404,
            detail="–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    if build['user_id'] != user_id:
        raise HTTPException(
            status_code=403,
            detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –±–∏–ª–¥–∞"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not name or not name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    if not class_name or not class_name.strip():
        raise HTTPException(
            status_code=400,
            detail="–ö–ª–∞—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
    try:
        import json
        if tags.startswith('[') and tags.endswith(']'):
            tags_list = json.loads(tags)
        else:
            tags_list = [t.strip() for t in tags.split(',') if t.strip()]
    except:
        tags_list = [t.strip() for t in tags.split(',') if t.strip()] if tags else []
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    build_data = {
        'name': name.strip(),
        'class': class_name.strip(),
        'tags': tags_list,
        'description': description.strip()
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    builds_dir = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id))
    os.makedirs(builds_dir, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if photo_1:
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            photo_1.file.seek(0)
            file_content = photo_1.file.read()
            photo_1.file.seek(0)
            
            if len(file_content) > 0:
                photo_1_path = os.path.join(builds_dir, 'photo_1.jpg')
                image1 = Image.open(photo_1.file)
                image1 = ImageOps.exif_transpose(image1)
                if image1.mode in ('RGBA', 'LA', 'P'):
                    background = Image.new('RGB', image1.size, (255, 255, 255))
                    if image1.mode == 'P':
                        image1 = image1.convert('RGBA')
                    background.paste(image1, mask=image1.split()[-1] if image1.mode == 'RGBA' else None)
                    image1 = background
                image1.save(photo_1_path, 'JPEG', quality=85, optimize=True)
                build_data['photo_1'] = f"/builds/{build_id}/photo_1.jpg"
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ 1 –¥–ª—è –±–∏–ª–¥–∞ {build_id}, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            else:
                print(f"‚ö†Ô∏è –§–æ—Ç–æ 1 –ø—É—Å—Ç–æ–µ –¥–ª—è –±–∏–ª–¥–∞ {build_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∏–ª–¥–∞ {build_id}: {e}")
            import traceback
            traceback.print_exc()
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
    
    if photo_2:
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            photo_2.file.seek(0)
            file_content = photo_2.file.read()
            photo_2.file.seek(0)
            
            if len(file_content) > 0:
                photo_2_path = os.path.join(builds_dir, 'photo_2.jpg')
                image2 = Image.open(photo_2.file)
                image2 = ImageOps.exif_transpose(image2)
                if image2.mode in ('RGBA', 'LA', 'P'):
                    background = Image.new('RGB', image2.size, (255, 255, 255))
                    if image2.mode == 'P':
                        image2 = image2.convert('RGBA')
                    background.paste(image2, mask=image2.split()[-1] if image2.mode == 'RGBA' else None)
                    image2 = background
                image2.save(photo_2_path, 'JPEG', quality=85, optimize=True)
                build_data['photo_2'] = f"/builds/{build_id}/photo_2.jpg"
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ 2 –¥–ª—è –±–∏–ª–¥–∞ {build_id}, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            else:
                print(f"‚ö†Ô∏è –§–æ—Ç–æ 2 –ø—É—Å—Ç–æ–µ –¥–ª—è –±–∏–ª–¥–∞ {build_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∏–ª–¥–∞ {build_id}: {e}")
            import traceback
            traceback.print_exc()
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
    
    print(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–ª–¥–∞ {build_id}: {list(build_data.keys())}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–¥ –≤ –ë–î
    success = update_build(DB_PATH, build_id, user_id, build_data)
    
    if not success:
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–ª–¥–∞"
        )
    
    return {
        "status": "ok",
        "message": "–ë–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        "build_id": build_id
    }


@app.get("/builds/{build_id}/{photo_name}")
async def get_build_photo(build_id: int, photo_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–ª–¥–∞.
    """
    photo_path = os.path.join(os.path.dirname(DB_PATH), 'builds', str(build_id), photo_name)
    
    if not os.path.exists(photo_path):
        raise HTTPException(
            status_code=404,
            detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    return FileResponse(photo_path, media_type='image/jpeg')


    # –£–¥–∞–ª—ë–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–æ—Ñ–µ—è—Ö

@app.get("/api/user_info/{user_id}")
async def get_user_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
    try:
        user = get_user(DB_PATH, user_id)
        if user:
            return user
        raise HTTPException(status_code=404, detail="User not found")
    except Exception as e:
        raise HTTPException(status_code=404, detail="User not found")

# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –¢–†–û–§–ï–ï–í ==========

# –£–¥–∞–ª–µ–Ω—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—Ä–æ—Ñ–µ–∏


# –£–¥–∞–ª—ë–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è


@app.post("/api/feedback.submit")
async def submit_feedback(
    user_id: int = Depends(get_current_user),
    description: str = Form(...),
    photos: Optional[List[UploadFile]] = File(default=None)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤/–±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è psn_id
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    psn_id = user_profile.get('psn_id', '')
    if not psn_id:
        raise HTTPException(
            status_code=400,
            detail="PSN ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    if not description or not description.strip():
        raise HTTPException(
            status_code=400,
            detail="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    if photos and len(photos) > 10:
        raise HTTPException(
            status_code=400,
            detail="–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if photos:
        for photo in photos:
            if not photo.content_type or not photo.content_type.startswith('image/'):
                raise HTTPException(
                    status_code=400,
                    detail="–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    temp_dir = None
    photo_paths = []
    
    try:
        if photos and len(photos) > 0:
            temp_dir = tempfile.mkdtemp(prefix='feedback_')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, photo in enumerate(photos):
                photo_path = os.path.join(temp_dir, f'photo_{i+1}.jpg')
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pillow
                image = Image.open(photo.file)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
                image = ImageOps.exif_transpose(image)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if image.mode in ('RGBA', 'LA', 'P'):
                    background = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'P':
                        image = image.convert('RGBA')
                    background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                    image = background
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
                image.save(photo_path, 'JPEG', quality=85, optimize=True)
                photo_paths.append(photo_path)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ñ–∞–π–ª–∞
                photo.file.seek(0)
    
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    message_text = f"""üí¨ <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤/–±–∞–≥-—Ä–µ–ø–æ—Ä—Ç</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {psn_id}

üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description.strip()}
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ë–ï–ó message_thread_id (–≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É)
    try:
        if len(photo_paths) == 1:
            # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await send_telegram_photo(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_path=photo_paths[0],
                caption=message_text
            )
        elif len(photo_paths) > 1:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=message_text
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ
            await send_telegram_media_group(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_paths=photo_paths
            )
        else:
            # –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=message_text
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    
    return {
        "status": "ok",
        "message": "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    }


# –£–¥–∞–ª—ë–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è


# –£–¥–∞–ª—ë–Ω —Ä–æ—É—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—Ä–æ—Ñ–µ–∏


# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ú–ê–°–¢–ï–†–°–¢–í–ê ==========

@app.get("/api/mastery.get")
async def get_mastery_levels(user_id: int = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {"solo": 0, "hellmode": 0, "raid": 0, "speedrun": 0}
    """
    try:
        mastery = get_mastery(DB_PATH, user_id)
        return mastery
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: {str(e)}"
        )


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from mastery_config import load_mastery_config


@app.post("/api/mastery.submitApplication")
async def submit_mastery_application(
    user_id: int = Depends(get_current_user),
    category_key: str = Form(...),
    current_level: int = Form(...),
    next_level: int = Form(...),
    comment: Optional[str] = Form(default=None),
    photos: Optional[List[UploadFile]] = File(default=None)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è psn_id
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(
            status_code=404,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    psn_id = user_profile.get('psn_id', '')
    if not psn_id:
        raise HTTPException(
            status_code=400,
            detail="PSN ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    try:
        config = load_mastery_config()
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞: {str(e)}"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    category = None
    for cat in config.get('categories', []):
        if cat.get('key') == category_key:
            category = cat
            break
    
    if not category:
        raise HTTPException(
            status_code=400,
            detail=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ"
        )
    
    max_levels = category.get('maxLevels', 0)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if photos is None or len(photos) == 0:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
    
    if len(photos) > 9:
        raise HTTPException(
            status_code=400,
            detail="–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 9 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for photo in photos:
        if not photo.content_type or not photo.content_type.startswith('image/'):
            raise HTTPException(
                status_code=400,
                detail="–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
    if next_level != current_level + 1:
        raise HTTPException(
            status_code=400,
            detail=f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {current_level + 1}, –ø–æ–ª—É—á–µ–Ω {next_level}"
        )
    
    if current_level >= max_levels:
        raise HTTPException(
            status_code=400,
            detail="–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    current_level_data = None
    next_level_data = None
    
    for level in category.get('levels', []):
        if level.get('level') == current_level:
            current_level_data = level
        if level.get('level') == next_level:
            next_level_data = level
    
    if not next_level_data:
        raise HTTPException(
            status_code=400,
            detail=f"–£—Ä–æ–≤–µ–Ω—å {next_level} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_key}"
        )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    temp_dir = None
    photo_paths = []
    
    try:
        temp_dir = tempfile.mkdtemp(prefix='mastery_app_')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, photo in enumerate(photos):
            photo_path = os.path.join(temp_dir, f'photo_{i+1}.jpg')
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pillow
            image = Image.open(photo.file)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
            image = ImageOps.exif_transpose(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
            image.save(photo_path, 'JPEG', quality=85, optimize=True)
            photo_paths.append(photo_path)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ñ–∞–π–ª–∞
            photo.file.seek(0)
    
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    current_level_name = current_level_data.get('name', f'–£—Ä–æ–≤–µ–Ω—å {current_level}') if current_level_data else f'–£—Ä–æ–≤–µ–Ω—å {current_level}'
    next_level_name = next_level_data.get('name', f'–£—Ä–æ–≤–µ–Ω—å {next_level}')
    next_level_description = next_level_data.get('description', '')
    next_level_proof = next_level_data.get('proof', '')
    category_name = category.get('name', category_key)
    
    comment_text = comment.strip() if comment and comment.strip() else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    
    message_text = f"""üèÜ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è</b>

üë§ <b>PSN ID:</b> {psn_id}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}
üìä <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> –£—Ä–æ–≤–µ–Ω—å {current_level} ‚Äî {current_level_name}
‚¨ÜÔ∏è <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å:</b> –£—Ä–æ–≤–µ–Ω—å {next_level} ‚Äî {next_level_name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:</b>
{next_level_description}

üì∏ <b>–¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b>
{next_level_proof}

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment_text}"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    reply_markup = {
        "inline_keyboard": [
            [
                {
                    "text": "–û–¥–æ–±—Ä–∏—Ç—å",
                    "callback_data": f"approve_mastery:{user_id}:{category_key}:{next_level}"
                },
                {
                    "text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    "callback_data": f"reject_mastery:{user_id}:{category_key}:{next_level}"
                }
            ]
        ]
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å message_thread_id (–≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–µ–º—É)
    try:
        if len(photo_paths) == 1:
            # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await send_telegram_photo(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_path=photo_paths[0],
                caption=message_text,
                reply_markup=reply_markup,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
            await send_telegram_message(
                chat_id=TROPHY_GROUP_CHAT_ID,
                text=message_text,
                reply_markup=reply_markup,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ
            await send_telegram_media_group(
                chat_id=TROPHY_GROUP_CHAT_ID,
                photo_paths=photo_paths,
                message_thread_id=TROPHY_GROUP_TOPIC_ID
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    
    return {
        "status": "ok",
        "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    }


# ========== API ENDPOINTS –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –±–æ—Ç–æ–º) ==========

def verify_bot_authorization(authorization: Optional[str] = Header(None)) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö endpoints.
    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å BOT_TOKEN –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization.
    """
    if not authorization:
        return False
    # –§–æ—Ä–º–∞—Ç: "Bearer {BOT_TOKEN}" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "{BOT_TOKEN}"
    token = authorization.replace("Bearer ", "").strip()
    return token == BOT_TOKEN


@app.post("/api/mastery.approve")
async def approve_mastery_application(
    user_id: int = Form(...),
    category_key: str = Form(...),
    next_level: int = Form(...),
    moderator_username: str = Form(...),
    authorization: Optional[str] = Header(None)
):
    """
    –û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å".
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    if not verify_bot_authorization(authorization):
        raise HTTPException(status_code=401, detail="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    from db import set_mastery, get_user, get_mastery
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    mastery_data = get_mastery(DB_PATH, user_id)
    current_level = mastery_data.get(category_key, 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ next_level –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ current_level + 1
    expected_next_level = current_level + 1
    if next_level != expected_next_level:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω–µ–π: —Ç–µ–∫—É—â–∏–π {current_level}, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π next_level {next_level}, –æ–∂–∏–¥–∞–µ–º—ã–π {expected_next_level}"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î (–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_level + 1)
    new_level = current_level + 1
    success = set_mastery(DB_PATH, user_id, category_key, new_level)
    if not success:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤ –ë–î")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    psn_id = user_profile.get('psn_id', '')
    username = user_profile.get('real_name', '')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    try:
        config = load_mastery_config()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    category = None
    level_data = None
    for cat in config.get('categories', []):
        if cat.get('key') == category_key:
            category = cat
            for level in cat.get('levels', []):
                if level.get('level') == next_level:
                    level_data = level
                    break
            break
    
    category_name = category.get('name', category_key) if category else category_key
    level_name = level_data.get('name', f'–£—Ä–æ–≤–µ–Ω—å {next_level}') if level_data else f'–£—Ä–æ–≤–µ–Ω—å {next_level}'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    try:
        user_notification = f"""‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>
–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: –£—Ä–æ–≤–µ–Ω—å {next_level} ‚Äî {level_name}

üìä <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> –£—Ä–æ–≤–µ–Ω—å {next_level} ‚Äî {level_name}"""
        
        await send_telegram_message(
            chat_id=str(user_id),
            text=user_notification
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ .env)
    # –ù–æ CONGRATULATIONS_CHAT_ID —Ç–µ–ø–µ—Ä—å –Ω–µ –≤ API, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –±–æ—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –±–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç
    
    return {
        "status": "ok",
        "success": True,
        "category_name": category_name,
        "level_name": level_name,
        "psn_id": psn_id,
        "username": username,
        "user_id": user_id
    }


@app.post("/api/mastery.reject")
async def reject_mastery_application(
    user_id: int = Form(...),
    category_key: str = Form(...),
    next_level: int = Form(...),
    reason: str = Form(...),
    moderator_username: str = Form(...),
    authorization: Optional[str] = Header(None)
):
    """
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—Ç–æ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    if not verify_bot_authorization(authorization):
        raise HTTPException(status_code=401, detail="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    from db import get_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_profile = get_user(DB_PATH, user_id)
    if not user_profile:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    try:
        config = load_mastery_config()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    category = None
    level_data = None
    for cat in config.get('categories', []):
        if cat.get('key') == category_key:
            category = cat
            for level in cat.get('levels', []):
                if level.get('level') == next_level:
                    level_data = level
                    break
            break
    
    category_name = category.get('name', category_key) if category else category_key
    level_name = level_data.get('name', f'–£—Ä–æ–≤–µ–Ω—å {next_level}') if level_data else f'–£—Ä–æ–≤–µ–Ω—å {next_level}'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    try:
        user_notification = f"""‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>
–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: –£—Ä–æ–≤–µ–Ω—å {next_level} ‚Äî {level_name}

–ü—Ä–∏—á–∏–Ω–∞: {reason}"""
        
        await send_telegram_message(
            chat_id=str(user_id),
            text=user_notification
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    return {
        "status": "ok",
        "success": True,
        "category_name": category_name,
        "level_name": level_name
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è CORS
@app.exception_handler(HTTPException)
async def cors_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail}
    )


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ Tsushima Mini App API...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print(f"üåê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π origin: {ALLOWED_ORIGIN}")
    print(f"ü§ñ Bot token: {BOT_TOKEN[:10]}..." if BOT_TOKEN else "‚ùå Bot token –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )
